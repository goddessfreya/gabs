#!/bin/zsh -x

# Find and load script config
local SCRIPTS_DIR="${0:A:h}"
[[ ! -d "${SCRIPTS_DIR}" ]] && exit 1

source "${SCRIPTS_DIR}/gabs-build-common" || exit $?

local STARTING_PARAMS=("$@")
local MAKEPKG_PARAM=("-s")
local MAKECHROOTPKG_PARAM=()
local CHROOT_DIR=
local RESUME_DIR=
local BACKUP_DIR=
local WIPE_SRC=false
local RESET_REL=
local DONT_BUMP_REL=false
local NO_BUILD=false
local CHROOT_NAME=
local DISTC_SUPPORT=false
local ONLY_REPACKAGE=false
local EPHEMERAL_DIR=
local PKGNAME=
local BUILD_CONFIG_SCRIPT="${SCRIPTS_DIR}/gabs-build-config"
local REAL_PACKAGE_DIR=
local PREVIOUS_REPAIR=

proc_nw() {
    [[ "${WIPE_SRC}" == "very_false" ]] && return
    WIPE_SRC=very_false
    MAKEPKG_PARAM+=("--noextract" "--noprepare" "--skipinteg")
}

while [[ ${#} -gt 0 ]]; do
	case "${1}" in
		-m) MAKEPKG_PARAM+=("${2}"); shift;;
		-mc) MAKECHROOTPKG_PARAM+=("${2}"); shift;;
		-w)
            if [[ "${WIPE_SRC}" != "false" ]]; then
                >&2 echo -w conflicts other parameter.
                exit 1
            fi
            WIPE_SRC=true
            MAKEPKG_PARAM+=("-C")
		;;
		-nw)
            if [[ "${WIPE_SRC}" != "false" ]]; then
                >&2 echo -nw conflicts other parameter.
                exit 1
            fi
            proc_nw
		;;
		-wn)
            if [[ "${WIPE_SRC}" != "false" ]]; then
                >&2 echo -wn conflicts other parameter.
                exit 1
            fi
            WIPE_SRC=nothing
        ;;
        -r)
            if [[ "${ONLY_REPACKAGE}" != "false" || "${WIPE_SRC}" != "false" && "${RESUME_DIR}" == "" ]]; then
                >&2 echo -r conflicts other parameter.
                exit 1
            fi
            ONLY_REPACKAGE=true
            MAKEPKG_PARAM+=("--repackage")
            proc_nw
        ;;
        -rs)
            if [[ "${RESUME_DIR}" != "" ]]; then
                >&2 echo Resume dir already passed.
                exit 1
            fi
            if [[ "${WIPE_SRC}" != "false" && "${ONLY_REPACKAGE}" != "true" ]]; then
                >&2 echo -rs conflicts other parameter.
                exit 1
            fi

            RESUME_DIR="${2}"
            proc_nw
			shift 
        ;;
        -bk) BACKUP_DIR="${2}"; shift;;
        -c) CHROOT_DIR="${2}"; MAKECHROOTPKG_PARAM+=("-r" "${2}"); shift;;
        -dbr) DONT_BUMP_REL=true;;
        -nb) NO_BUILD=true;;
        -rr) RESET_REL="${2}"; shift;;
		-cn) CHROOT_NAME="${2}"; shift;;
        -dist) DISTC_SUPPORT=true;;
        -ed) EPHEMERAL_DIR="${2}"; shift;;
        -pn) PKGNAME="${2}"; shift;;
        -bcs) BUILD_CONFIG_SCRIPT="${2}"; shift;;
        -rpd) REAL_PACKAGE_DIR="${2}"; shift;;
        -pr) PREVIOUS_REPAIR="${2}"; shift;;

        --help)
            >&2 echo "Please refer to the README."
            exit
        ;;
		*) # unknown option
			>&2 echo "Unkown option \"${1}\""
            exit 1
		;;
	esac
    shift
done

BUILTINS_DIR=
error_blank_nondir_param -f BUILD_CONFIG_SCRIPT
source "${BUILD_CONFIG_SCRIPT}" || exit $?
[[ ! -d "${BUILTINS_DIR}" ]] && exit 1

error_blank_nondir_param -d REAL_PACKAGE_DIR
error_blank_nondir_param -d EPHEMERAL_DIR
error_blank_nondir_param -d CHROOT_DIR
error_blank_param CHROOT_NAME
error_blank_param PKGNAME

if [[ "${WIPE_SRC}" != "very_false" && "${DONT_BUMP_REL}" == "false" || "${RESET_REL}" != "" ]]; then
    local PKGREL="$(cat PKGBUILD | grep "^pkgrel=[0-9]*$" | cut -d"=" -f2)"

    if [[ "$(echo "${PKGREL}" | wc -l)" != "1" ]]; then
        >&2 echo Invalid number of pkgrel found, exiting
        exit 1
    fi

    if [[ "${RESET_REL}" != "" ]]; then
        sed -i "s/^pkgrel=${PKGREL}$/pkgrel=${RESET_REL}/g" PKGBUILD
        exit
    fi
    
    sed -i "s/^pkgrel=${PKGREL}$/pkgrel=$(( ${PKGREL} + 1 ))/g" PKGBUILD
fi

[[ -d "${HOME}/.ccache" ]] && MAKECHROOTPKG_PARAM+=("-d" "${HOME}/.ccache:/ccache")

[[ "${WIPE_SRC}" == "false" ]] && MAKEPKG_PARAM+=("-c")

# Remove old packages
sudo rm *.pkg*
sudo rm  -rf "${CHROOT_DIR}/root/pkgs/"

if [[ "${RESUME_DIR}" != "" ]]; then
    sudo rsync -chavPASWX --stats --inplace  --compress-level=0 \
        "${CHROOT_DIR}/root/" "${CHROOT_DIR}/${USER}" || exit $?
    mkdir -p "${CHROOT_DIR}/${USER}/build"
    sudo rsync -chavPASWX --stats --inplace  --compress-level=0 \
        "${RESUME_DIR}/" "${CHROOT_DIR}/${USER}/build" || exit $?
fi

local MAKECHROOTPKG_BIN="${EPHEMERAL_DIR}/custom.${CHROOT_NAME}/makechrootpkg"
local MAKEPKG_BIN="${CHROOT_DIR}/${USER}/bin/makepkg"

mkdir -p data

sudo cp "/bin/makechrootpkg" "${MAKECHROOTPKG_BIN}"
chmod +x "${MAKECHROOTPKG_BIN}"
patch -p1 -i"${BUILTINS_DIR}/makepkg_patches/use_custom.patch" \
    -d"${EPHEMERAL_DIR}/custom.${CHROOT_NAME}"

# We got to make a copy of makepkg... make it use pump
sudo rm "${CHROOT_DIR}/${USER}/bin/makepkg.gabs-inner"
sudo cp "${CHROOT_DIR}/root/bin/makepkg" "${MAKEPKG_BIN}"

sudo patch -p1 -i"${BUILTINS_DIR}/makepkg_patches/force_color.patch" \
    -d"${CHROOT_DIR}/${USER}/bin"

if [[ "${DISTC_SUPPORT}" == "true" ]]; then
    sudo mv "${CHROOT_DIR}/${USER}/bin/makepkg"{,.gabs-inner}
    printf '#!/bin/zsh -x\npump /bin/makepkg.gabs-inner "$@"\n' \
        | sudo tee "${MAKEPKG_BIN}"
    sudo chmod +x "${MAKEPKG_BIN}"
fi

# Then actually build it
if [[ "${NO_BUILD}" != "true" ]]; then
    if ! sudo "${MAKECHROOTPKG_BIN}" "${MAKECHROOTPKG_PARAM[@]}" \
        -- CCACHE_DIR=/ccache "${MAKEPKG_PARAM[@]}" \
        2> >(tee data/makechrootpkgerrors 1>&2); then

        if [[ "$(cat data/makechrootpkgerrors | tail -n2)" \
            == "$(cat "${BUILTINS_DIR}/makepkg_errors/updpkgsums")" \
            && "${PREVIOUS_REPAIR}" != "updpkgsums" ]]; then
            updpkgsums
            cp PKGBUILD "${REAL_PACKAGE_DIR}/PKGBUILD"
            exec "${SCRIPTS_DIR}/gabs-build-handler" "${STARTING_PARAMS[@]}" \
                -pr updpkgsums
        else
            exit $?
        fi
    fi
fi

[[ "${BACKUP_DIR}" != "" ]] && \
    sudo rsync -chavPASWX --stats --inplace --compress-level=0 \
        "${CHROOT_DIR}/${USER}/build/" "${BACKUP_DIR}" || exit $?

[[ "${NO_BUILD}" == "true" ]] && exit

if [[ "$(ls *.pkg.(tar|tar.gz|tar.xz|tar.bz2) | wc -l)" == "0" ]]; then
    >&2 echo No packages generated.
    exit 1
fi

# Install the pkg everywhere.
for CHROOT_DIR2 in "${CHROOT_DIR}"/*; do
    [[ ! -d "${CHROOT_DIR2}" ]] && continue
    sudo mkdir -p "${CHROOT_DIR2}/pkgs/"
    sudo cp *.pkg.(tar|tar.gz|tar.xz|tar.bz2) "${CHROOT_DIR2}/pkgs/"
    nspawn "${CHROOT_DIR2}" /bin/bash -xc "yes | pacman -U /pkgs/* || exit \$?" || exit $?
    sudo rm "${CHROOT_DIR2}/pkgs/"*
done

# Move the old packages out
if [[ -f "data/packages" && "$(cat "data/packages" | wc -l)" != "0" ]]; then
    pushd "${EPHEMERAL_DIR}/pkgs.${CHROOT_NAME}"
    cat "data/packages" | xargs -I% sudo mv % "${EPHEMERAL_DIR}/pkgs.old.${CHROOT_NAME}"
    popd
fi

# Update the package list.
ls *.pkg.(tar|tar.gz|tar.xz|tar.bz2) > "data/packages"

# Add it with the rest of the packages
cat "data/packages" | xargs -I% sudo mv % "${EPHEMERAL_DIR}/pkgs.${CHROOT_NAME}"
