#!/bin/zsh -x

# https://stackoverflow.com/questions/16860877/remove-an-element-from-a-bash-array
# Array names cannot start with RFA_
remove_from_array() {
    RFA_RETURN=()
    local RFA_ARRAY=${1}
    local RFA_TO_REMOVE=${2}
    for mem in "${(P)${RFA_ARRAY}[@]}"; do
        for remove in "${(P)${RFA_TO_REMOVE}[@]}"; do
            local KEEP=true
            if [[ "${mem}" == "${remove}" ]]; then
                local KEEP=false
                break
            fi
        done
        if ${KEEP}; then
            RFA_RETURN+=(${mem})
        fi
    done
}

array_contains_element () {
    local e match="${1}"
    shift
    for e; do [[ "${e}" == "${match}" ]] && return 0; done
    return 1
}

nspawn() {
    setarch x86_64 /usr/bin/systemd-nspawn -q \
        -D "${1}" \
	    -E "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin" \
        --register=no --keep-unit --as-pid2 \
        --bind=/var/cache/pacman/pkg \
        "${@:2}"
}

print_fallback_param() {
    >&2 echo "Falling back to using \"${1}\" of \"${@:2}\"."
}

error_blank_param() {
    if [[ "${(P)1}" == "" ]]; then
        >&2 echo "\"${1}\" was never passed."
        exit 1
    fi
}

error_blank_nondir_param() {
    error_blank_param "${2}"

    if [[ ("${1}" == "-f" && ! -f "${(P)2}") || ("${1}" == "-d" && ! -d "${(P)2}") ]]; then
        >&2 echo "\"${2}\"'s directory \"${(P)2}\" does not exist."
        exit 1
    fi
}

if_buildenv_uses() {
    if [[ "$(awk "{
        if (/^ *BUILDENV *= *\\( */) {
            split(\$0, a, \"(\");
            for (i in a) if (i == 2) {
                split(a[i], b, \")\");
                for (j in b) if (j == 1) {
                    split(b[j], c, \" \")
                    for(k in c) if(c[k] == tolower(\"${1}\") || c[k] == tolower(\"!${1}\"))
                        printf c[k]
                }
            }
        }
    }" "${EPHEMERAL_DIR}/custom.${CHROOT_NAME}/makepkg.conf")"
        == "$(echo "${1}" | awk '{ printf tolower($0) }')" ]]; then
        eval USE_${1}=true
    else
        eval USE_${1}=false
    fi
}

clone_file() {
    for CHROOT_DIR2 in "${CHROOT_DIR}"/*; do
        [[ ! -d "${CHROOT_DIR2}" ]] && continue
        cp "${1}" "${CHROOT_DIR2}${2}"

        chown ${3} "${CHROOT_DIR2}${2}"
        chmod ${4} "${CHROOT_DIR2}${2}"
    done
}

cleanup_loopdevice1() {
    sleep 2
    until losetup -d "${LOOP_DEVICE}"; do sleep 2; done
}

cleanup_loopdevice2() {
    if [[ "${UNMOUNT_LOOP_DEVICE}" == "true" ]]; then
        sleep 2
        until umount "${CHROOT_MOUNT}"; do sleep 2; done
        until losetup -d "${LOOP_DEVICE}"; do sleep 2; done
    fi
}

# Unmount old loopdevices that where kept due to bad cleanup
cleanup_loopdevice() {
    losetup -j "${CHROOT_FILE}" \
        | cut -d":" -f1 \
        | xargs -I% bash -xc '
            lsblk "%" -o MOUNTPOINT -n | xargs umount
            losetup -d "%"
        '
}

# We use a loop device cause sometimes the partitions have nosuid on them,
# which breaks the /bin/sudo in the chroot when used from outside the chroot,
# which breaks makepkg for some reason.
setup_loopdevice() {
    if [[ "${REMAKE_CHROOT}" == "true" ]]; then
        rm "${CHROOT_FILE}"
        fallocate -l ${LOOP_DEVICE_SIZE} "${CHROOT_FILE}" || exit $?
    fi

    LOOP_DEVICE="$(losetup -f)"
    losetup "${LOOP_DEVICE}" "${CHROOT_FILE}" || exit $?

    trap cleanup_loopdevice1 EXIT

    if [[ "${REMAKE_CHROOT}" == "true" ]]; then
        mkfs.ext4 "${LOOP_DEVICE}" || exit $?
    fi

    mkdir -p "${CHROOT_MOUNT}"
    mount "${LOOP_DEVICE}" "${CHROOT_MOUNT}" || exit $?

    trap -- EXIT
}

builtin_config_script_try_dirs() {
    try_build_config_script() {
        if [[ "${BUILD_CONFIG_SCRIPT}" == "" || ! -f "${BUILD_CONFIG_SCRIPT}" ]]; then
            BUILD_CONFIG_SCRIPT="${1}"
        fi
    }

    if [[ "${BUILD_CONFIG_SCRIPT}" == "" ]]; then 
        try_build_config_script "$(pwd)/gabs-build-config"
        try_build_config_script "${EPHEMERAL_DIR}/gabs-build-config"
        try_build_config_script "${HOME}/.config/gabs-build-config"
        try_build_config_script "/etc/gabs-build-config"
        try_build_config_script "${SCRIPTS_DIR}/gabs-build-config"
    fi
}
